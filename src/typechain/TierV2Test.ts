/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TierV2TestInterface extends utils.Interface {
  functions: {
    "report(address,uint256[])": FunctionFragment;
    "reportTimeForTier(address,uint256,uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "report",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reportTimeForTier",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportTimeForTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface TierV2Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TierV2TestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    report(
      arg0: string,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reportTimeForTier(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  report(
    arg0: string,
    arg1: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reportTimeForTier(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId_: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    report(
      arg0: string,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportTimeForTier(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    report(
      arg0: string,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportTimeForTier(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    report(
      arg0: string,
      arg1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reportTimeForTier(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
