/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FixedPointMathTest,
  FixedPointMathTestInterface,
} from "../FixedPointMathTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
    ],
    name: "fixedPointDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b_",
        type: "uint256",
      },
    ],
    name: "fixedPointMul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "aDecimals_",
        type: "uint256",
      },
    ],
    name: "scale18",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "int8",
        name: "scaleBy_",
        type: "int8",
      },
    ],
    name: "scaleBy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetDecimals_",
        type: "uint256",
      },
    ],
    name: "scaleN",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063798cc0e911610050578063798cc0e9146100a457806381b8e2a6146100b7578063b34bbe35146100ca57600080fd5b8063279bd00e1461006c5780636baf68f414610091575b600080fd5b61007f61007a366004610344565b6100dd565b60405190815260200160405180910390f35b61007f61009f36600461037a565b6100f2565b61007f6100b236600461037a565b6100fe565b61007f6100c536600461037a565b61010a565b61007f6100d836600461037a565b610116565b60006100e98383610122565b90505b92915050565b60006100e98383610183565b60006100e98383610198565b60006100e983836101ad565b60006100e98383610214565b60008160000b6000036101365750816100ec565b60008260000b131561015e5761014d82600a6104eb565b61015790846104fa565b90506100ec565b60ff60008390031661017181600a610511565b61017b908561054c565b9150506100ec565b60006100e983670de0b6b3a764000084610271565b60006100e98383670de0b6b3a7640000610271565b600080601283036101c157839150506100ec565b82601211156101db5750601282900361017181600a610511565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161020a81600a610511565b61017b90856104fa565b6000808260120361022857839150506100ec565b82601211156102425750601282900361020a81600a610511565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee820161017181600a610511565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036102c9578382816102bf576102bf61051d565b049250505061033d565b8084116102d557600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b6000806040838503121561035757600080fd5b8235915060208301358060000b811461036f57600080fd5b809150509250929050565b6000806040838503121561038d57600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561042457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561040a5761040a61039c565b8085161561041757918102915b93841c93908002906103d0565b509250929050565b60008261043b575060016100ec565b81610448575060006100ec565b816001811461045e576002811461046857610484565b60019150506100ec565b60ff8411156104795761047961039c565b50506001821b6100ec565b5060208310610133831016604e8410600b84101617156104a7575081810a6100ec565b6104b183836103cb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156104e3576104e361039c565b029392505050565b60006100e960ff84168361042c565b80820281158282048414176100ec576100ec61039c565b60006100e9838361042c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082610582577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122049e2456949cbcdcc3ba24264a3643f9049b537b47089a12d5e1549df92e8cff664736f6c63430008110033";

type FixedPointMathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointMathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointMathTest__factory extends ContractFactory {
  constructor(...args: FixedPointMathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FixedPointMathTest> {
    return super.deploy(overrides || {}) as Promise<FixedPointMathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FixedPointMathTest {
    return super.attach(address) as FixedPointMathTest;
  }
  connect(signer: Signer): FixedPointMathTest__factory {
    return super.connect(signer) as FixedPointMathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointMathTestInterface {
    return new utils.Interface(_abi) as FixedPointMathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointMathTest {
    return new Contract(address, _abi, signerOrProvider) as FixedPointMathTest;
  }
}
