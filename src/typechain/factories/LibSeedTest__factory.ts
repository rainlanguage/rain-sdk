/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibSeedTest, LibSeedTestInterface } from "../LibSeedTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "Seed",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "val_",
        type: "uint256",
      },
    ],
    name: "with",
    outputs: [
      {
        internalType: "Seed",
        name: "newSeed_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cd8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632d586d6014602d575b600080fd5b606460383660046076565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60405190815260200160405180910390f35b60008060408385031215608857600080fd5b5050803592602090910135915056fea26469706673582212209955ad081ce6189110500fce883682002f8f9c2c32bf1166d316fe8ff21fe90064736f6c63430008110033";

type LibSeedTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibSeedTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibSeedTest__factory extends ContractFactory {
  constructor(...args: LibSeedTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibSeedTest> {
    return super.deploy(overrides || {}) as Promise<LibSeedTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibSeedTest {
    return super.attach(address) as LibSeedTest;
  }
  connect(signer: Signer): LibSeedTest__factory {
    return super.connect(signer) as LibSeedTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibSeedTestInterface {
    return new utils.Interface(_abi) as LibSeedTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibSeedTest {
    return new Contract(address, _abi, signerOrProvider) as LibSeedTest;
  }
}
