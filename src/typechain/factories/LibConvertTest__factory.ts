/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibConvertTest,
  LibConvertTestInterface,
} from "../LibConvertTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "is_",
        type: "uint256[]",
      },
    ],
    name: "toBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "bytes_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "is_",
        type: "uint256[]",
      },
    ],
    name: "unsafeTo16BitBytes",
    outputs: [
      {
        internalType: "bytes",
        name: "bytes_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102f1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634c2324bb1461003b578063b2a8ad1414610064575b600080fd5b61004e610049366004610173565b610077565b60405161005b919061024f565b60405180910390f35b61004e610072366004610173565b610099565b60606100816100ac565b81516020028252815b90506100946100ac565b919050565b60606100a36100ac565b61008a826100b4565b6040516000a0565b60606000825160020267ffffffffffffffff8111156100d5576100d5610144565b6040519080825280601f01601f1916602001820160405280156100ff576020820181803683370190505b50905061ffff801990506020840160208551028101600284015b818310156101395780518351908516178152602090920191600201610119565b509295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602080838503121561018657600080fd5b823567ffffffffffffffff8082111561019e57600080fd5b818501915085601f8301126101b257600080fd5b8135818111156101c4576101c4610144565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561020757610207610144565b60405291825284820192508381018501918883111561022557600080fd5b938501935b828510156102435784358452938501939285019261022a565b98975050505050505050565b600060208083528351808285015260005b8181101561027c57858101830151858201604001528201610260565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea26469706673582212208c9cca5b4f36a24d9f833c1dbe8f1ad38a1ecdf378dd01203c11cdabb03d67b464736f6c63430008110033";

type LibConvertTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibConvertTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibConvertTest__factory extends ContractFactory {
  constructor(...args: LibConvertTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibConvertTest> {
    return super.deploy(overrides || {}) as Promise<LibConvertTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibConvertTest {
    return super.attach(address) as LibConvertTest;
  }
  connect(signer: Signer): LibConvertTest__factory {
    return super.connect(signer) as LibConvertTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibConvertTestInterface {
    return new utils.Interface(_abi) as LibConvertTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibConvertTest {
    return new Contract(address, _abi, signerOrProvider) as LibConvertTest;
  }
}
