/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LibStackTopTestInterface extends utils.Interface {
  functions: {
    "applyFn(uint256[],uint256)": FunctionFragment;
    "applyFn2Heads(uint256[],uint256)": FunctionFragment;
    "applyFn2Operand(uint256[],uint256)": FunctionFragment;
    "applyFn2Tails(uint256[],uint256)": FunctionFragment;
    "applyFn3Heads(uint256[],uint256)": FunctionFragment;
    "applyFn3Summer(uint256[])": FunctionFragment;
    "applyFnNSummer(uint256[],uint256)": FunctionFragment;
    "applyFnSummer(uint256[])": FunctionFragment;
    "asStackTop(bytes)": FunctionFragment;
    "asStackTopAsBytes(bytes)": FunctionFragment;
    "asStackTopAsUint256Array(uint256[])": FunctionFragment;
    "consumeSentinel(uint256[],uint256,uint256)": FunctionFragment;
    "consumeSentinels(uint256[],uint256,uint256,uint256)": FunctionFragment;
    "down(uint256[])": FunctionFragment;
    "list(uint256[],uint256)": FunctionFragment;
    "peek(uint256[],uint256)": FunctionFragment;
    "peek2(bytes,uint256)": FunctionFragment;
    "peekUp(uint256[])": FunctionFragment;
    "peekUpStackTop(bytes,uint256)": FunctionFragment;
    "pop(uint256[],uint256)": FunctionFragment;
    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "pushWithLength(uint256[],uint256[])": FunctionFragment;
    "set(bytes,uint256,uint256)": FunctionFragment;
    "toIndex(uint256[],uint256[])": FunctionFragment;
    "unalignedPush(bytes,bytes)": FunctionFragment;
    "unalignedPushWithLength(bytes,bytes)": FunctionFragment;
    "up(uint256[])": FunctionFragment;
    "upBytes(uint256[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyFn",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Heads",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Operand",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2Tails",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn3Heads",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn3Summer",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFnNSummer",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFnSummer",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTop",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTopAsBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "asStackTopAsUint256Array",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeSentinel",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeSentinels",
    values: [BigNumberish[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "down",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "peek",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "peek2",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUp",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "peekUpStackTop",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pop",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushWithLength",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toIndex",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unalignedPush",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unalignedPushWithLength",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "up", values: [BigNumberish[]]): string;
  encodeFunctionData(
    functionFragment: "upBytes",
    values: [BigNumberish[], BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "applyFn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Heads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Operand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn2Tails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn3Heads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFn3Summer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFnNSummer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyFnSummer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asStackTop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "asStackTopAsBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "asStackTopAsUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeSentinels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "down", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peek2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peekUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "peekUpStackTop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushWithLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unalignedPush",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unalignedPushWithLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "up", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upBytes", data: BytesLike): Result;

  events: {};
}

export interface LibStackTopTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibStackTopTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "applyFn(uint256[],uint256)"(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "applyFn(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFn2Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFn2Operand(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFn2Tails(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFn3Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFn3Summer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFnNSummer(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyFnSummer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "asStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "asStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asStackTopAsBytes(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asStackTopAsUint256Array(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    consumeSentinel(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    consumeSentinels(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize0_: BigNumberish,
      stepSize1_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel0_: BigNumber[];
        arraySentinel1_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    "down(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "down(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    list(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek2(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peek2(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUp(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUp(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUp(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUp(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      f_: BigNumberish,
      g_: BigNumberish,
      h_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256[])"(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "push(uint256[],uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushWithLength(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(bytes,uint256,uint256)"(
      bytes_: BytesLike,
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256[],uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toIndex(
      array0_: BigNumberish[],
      array1_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unalignedPush(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unalignedPushWithLength(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "up(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "up(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upBytes(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "applyFn(uint256[],uint256)"(
    array_: BigNumberish[],
    operand_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "applyFn(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFn2Heads(
    array_: BigNumberish[],
    length_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFn2Operand(
    array_: BigNumberish[],
    operand_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFn2Tails(
    array_: BigNumberish[],
    length_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFn3Heads(
    array_: BigNumberish[],
    length_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFn3Summer(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFnNSummer(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyFnSummer(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "asStackTop(bytes)"(
    bytes_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "asStackTop(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asStackTopAsBytes(
    bytes_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asStackTopAsUint256Array(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  consumeSentinel(
    array_: BigNumberish[],
    sentinel_: BigNumberish,
    stepSize_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber, BigNumber] & {
      stackTopSentinel_: BigNumber;
      arraySentinel_: BigNumber[];
      stackTop_: BigNumber;
      stackBottom_: BigNumber;
    }
  >;

  consumeSentinels(
    array_: BigNumberish[],
    sentinel_: BigNumberish,
    stepSize0_: BigNumberish,
    stepSize1_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
      stackTopSentinel_: BigNumber;
      arraySentinel0_: BigNumber[];
      arraySentinel1_: BigNumber[];
      stackTop_: BigNumber;
      stackBottom_: BigNumber;
    }
  >;

  "down(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "down(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  list(
    array_: BigNumberish[],
    length_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek(bytes,uint256)"(
    bytes_: BytesLike,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek(bytes)"(
    bytes_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek2(bytes,uint256)"(
    bytes_: BytesLike,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peek2(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUp(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUp(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUp(bytes)"(
    bytes_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUp(bytes,uint256)"(
    bytes_: BytesLike,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(bytes,uint256)"(
    bytes_: BytesLike,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(bytes)"(
    bytes_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "peekUpStackTop(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pop(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pop(bytes,uint256)"(
    bytes_: BytesLike,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    array_: BigNumberish[],
    a_: BigNumberish,
    b_: BigNumberish,
    c_: BigNumberish,
    d_: BigNumberish,
    e_: BigNumberish,
    f_: BigNumberish,
    g_: BigNumberish,
    h_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256[])"(
    array_: BigNumberish[],
    pushArray_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "push(uint256[],uint256)"(
    array_: BigNumberish[],
    a_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushWithLength(
    array_: BigNumberish[],
    pushArray_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(bytes,uint256,uint256)"(
    bytes_: BytesLike,
    a_: BigNumberish,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256[],uint256,uint256)"(
    array_: BigNumberish[],
    a_: BigNumberish,
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toIndex(
    array0_: BigNumberish[],
    array1_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unalignedPush(
    bytes0_: BytesLike,
    bytes1_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unalignedPushWithLength(
    bytes0_: BytesLike,
    bytes1_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "up(uint256[])"(
    array_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "up(uint256[],uint256)"(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upBytes(
    array_: BigNumberish[],
    n_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "applyFn(uint256[],uint256)"(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "applyFn(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Operand(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2Tails(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3Summer(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnNSummer(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnSummer(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "asStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asStackTopAsBytes(
      bytes_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    asStackTopAsUint256Array(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    consumeSentinel(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    consumeSentinels(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize0_: BigNumberish,
      stepSize1_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        stackTopSentinel_: BigNumber;
        arraySentinel0_: BigNumber[];
        arraySentinel1_: BigNumber[];
        stackTop_: BigNumber;
        stackBottom_: BigNumber;
      }
    >;

    "down(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    "down(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    list(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { head_: BigNumber; tail_: BigNumber[] }
    >;

    "peek(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek(bytes)"(
      bytes_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peek2(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a_: BigNumber; b_: BigNumber }>;

    "peek2(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { a_: BigNumber; b_: BigNumber }>;

    "peekUp(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(bytes)"(
      bytes_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUp(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stackTopAfter_: BigNumber; a_: BigNumber }
    >;

    "pop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { stackTopAfter_: BigNumber; a_: BigNumber }
    >;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      f_: BigNumberish,
      g_: BigNumberish,
      h_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(uint256[],uint256[])"(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(uint256[],uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushWithLength(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "set(bytes,uint256,uint256)"(
      bytes_: BytesLike,
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "set(uint256[],uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toIndex(
      array0_: BigNumberish[],
      array1_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        index_: BigNumber;
        stackBottom_: BigNumber;
        stackTop_: BigNumber;
      }
    >;

    unalignedPush(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unalignedPushWithLength(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "up(uint256[])"(
      array_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    "up(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;

    upBytes(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stackTopBefore_: BigNumber;
        stackTopAfter_: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    "applyFn(uint256[],uint256)"(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "applyFn(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFn2Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFn2Operand(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFn2Tails(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFn3Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFn3Summer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFnNSummer(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyFnSummer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "asStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "asStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asStackTopAsBytes(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asStackTopAsUint256Array(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    consumeSentinel(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consumeSentinels(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize0_: BigNumberish,
      stepSize1_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "down(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "down(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    list(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek2(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peek2(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUp(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUp(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUp(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUp(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      f_: BigNumberish,
      g_: BigNumberish,
      h_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256[])"(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "push(uint256[],uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushWithLength(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(bytes,uint256,uint256)"(
      bytes_: BytesLike,
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256[],uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toIndex(
      array0_: BigNumberish[],
      array1_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unalignedPush(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unalignedPushWithLength(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "up(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "up(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upBytes(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "applyFn(uint256[],uint256)"(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "applyFn(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Operand(
      array_: BigNumberish[],
      operand_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFn2Tails(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFn3Heads(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFn3Summer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFnNSummer(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyFnSummer(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "asStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "asStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asStackTopAsBytes(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asStackTopAsUint256Array(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    consumeSentinel(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consumeSentinels(
      array_: BigNumberish[],
      sentinel_: BigNumberish,
      stepSize0_: BigNumberish,
      stepSize1_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "down(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "down(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    list(
      array_: BigNumberish[],
      length_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek2(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peek2(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUp(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(bytes)"(
      bytes_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "peekUpStackTop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pop(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pop(bytes,uint256)"(
      bytes_: BytesLike,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      f_: BigNumberish,
      g_: BigNumberish,
      h_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256[])"(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "push(uint256[],uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushWithLength(
      array_: BigNumberish[],
      pushArray_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(bytes,uint256,uint256)"(
      bytes_: BytesLike,
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256[],uint256,uint256)"(
      array_: BigNumberish[],
      a_: BigNumberish,
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toIndex(
      array0_: BigNumberish[],
      array1_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unalignedPush(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unalignedPushWithLength(
      bytes0_: BytesLike,
      bytes1_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "up(uint256[])"(
      array_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "up(uint256[],uint256)"(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upBytes(
      array_: BigNumberish[],
      n_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
