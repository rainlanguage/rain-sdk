/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RandomTest, RandomTestInterface } from "../RandomTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "max_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "n_",
        type: "uint256",
      },
    ],
    name: "microLottery",
    outputs: [
      {
        internalType: "uint256",
        name: "item_",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "randomId",
    outputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "len_",
        type: "uint256",
      },
    ],
    name: "shuffle",
    outputs: [
      {
        internalType: "bytes",
        name: "shuffled_",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index_",
        type: "uint256",
      },
    ],
    name: "shuffleIdAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "id_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shuffled",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108d7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806361d4ba9b1161005057806361d4ba9b146100b25780638f1ea97f146100c5578063bffa7fe8146100d857600080fd5b80631715b9ee1461006c57806329fa6d0214610092575b600080fd5b61007f61007a36600461069f565b61011d565b6040519081526020015b60405180910390f35b6100a56100a03660046106cb565b610132565b6040516100899190610711565b61007f6100c03660046106cb565b610194565b61007f6100d3366004610762565b6101af565b6000546100f89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610089565b600061012a8484846101fa565b949350505050565b606061013e83836103bc565b9050610149816104b6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905592915050565b600260015560008281526020829052604081205b9392505050565b600180556000805473ffffffffffffffffffffffffffffffffffffffff166101d78184610541565b915060006101e684600161077b565b90506101f28282610541565b505050919050565b600082821061026a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f4d41585f4e00000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60ff8311156102d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f4d41585f4d4158000000000000000000000000000000000000000000000000006044820152606401610261565b60008367ffffffffffffffff8111156102f0576102f06107b5565b6040519080825280601f01601f19166020018201604052801561031a576020820181803683370190505b509050610337565b8082015160ff16806103315750815b92915050565b846000526020810160018201600186035b858111156103955761035a8183610322565b60206000908120908190526001830190068401537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610348565b5060206000908120908190526103b19060018701900682610322565b979650505050505050565b60608160020267ffffffffffffffff8111156103da576103da6107b5565b6040519080825280601f01601f191660200182016040528015610404576020820181803683370190505b50905082600052600281017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000061ffff600185035b80156104ac576002810284018051838116806104515750825b60206000208060005260018501810690506002810288018051878116806104755750825b948916909417909452509085161790527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610438565b5050505092915050565b6000806104e1836040516020016104cd91906107e4565b60405160208183030381529060405261056b565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff821661053b576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b600080826002029050600061055a858384600201610597565b6002015161ffff1695945050505050565b606081518260405160200161058192919061080a565b6040516020818303038152906040529050919050565b606061012a846105a885600161077b565b6105b385600161077b565b6060833b60008190036105d65750506040805160208101909152600081526101a8565b808411156105f45750506040805160208101909152600081526101a8565b8383101561063f576040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260448101849052606401610261565b83830384820360008282106106545782610656565b815b60408051603f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101909152818152955090508087602087018a3c505050509392505050565b6000806000606084860312156106b457600080fd5b505081359360208301359350604090920135919050565b600080604083850312156106de57600080fd5b50508035926020909101359150565b60005b838110156107085781810151838201526020016106f0565b50506000910152565b60208152600082518060208401526107308160408501602087016106ed565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561077457600080fd5b5035919050565b80820180821115610331577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008152600082516107fd8160018501602087016106ed565b9190910160010192915050565b7f630000000000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008360e01b1660018201527f80600e6000396000f3000000000000000000000000000000000000000000000060058201526000825161089381600e8501602087016106ed565b91909101600e01939250505056fea264697066735822122005ad309cb1fd2f15cceb9864d4104c1c2e0dfb84bafd486794e151c91e72189364736f6c63430008110033";

type RandomTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomTest__factory extends ContractFactory {
  constructor(...args: RandomTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RandomTest> {
    return super.deploy(overrides || {}) as Promise<RandomTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RandomTest {
    return super.attach(address) as RandomTest;
  }
  connect(signer: Signer): RandomTest__factory {
    return super.connect(signer) as RandomTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomTestInterface {
    return new utils.Interface(_abi) as RandomTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomTest {
    return new Contract(address, _abi, signerOrProvider) as RandomTest;
  }
}
