/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type StorageOpcodesRangeStruct = {
  pointer: BigNumberish;
  length: BigNumberish;
};

export type StorageOpcodesRangeStructOutput = [BigNumber, BigNumber] & {
  pointer: BigNumber;
  length: BigNumber;
};

export interface LibIntegrityStateTestInterface extends utils.Interface {
  functions: {
    "applyFn0(uint256)": FunctionFragment;
    "applyFn1(uint256)": FunctionFragment;
    "applyFn2(uint256)": FunctionFragment;
    "applyFn3(uint256)": FunctionFragment;
    "applyFn4(uint256)": FunctionFragment;
    "applyFn5(uint256,uint256)": FunctionFragment;
    "applyFn6(uint256,uint256)": FunctionFragment;
    "applyFn7(uint256,uint256)": FunctionFragment;
    "applyFn8(uint256,uint256)": FunctionFragment;
    "applyFnN(uint256,uint256)": FunctionFragment;
    "ensureIntegrity((uint256,uint256),bytes[],uint256,uint256[])": FunctionFragment;
    "ensureIntegrityTest(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "popUnderflowCheck(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)": FunctionFragment;
    "syncStackMaxTop(bytes[],(uint256,uint256),uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyFn0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn3",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn4",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn5",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn6",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn7",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFn8",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applyFnN",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureIntegrity",
    values: [
      StorageOpcodesRangeStruct,
      BytesLike[],
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ensureIntegrityTest",
    values: [
      BytesLike[],
      StorageOpcodesRangeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pop",
    values: [
      BytesLike[],
      StorageOpcodesRangeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "popUnderflowCheck",
    values: [
      BytesLike[],
      StorageOpcodesRangeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [
      BytesLike[],
      StorageOpcodesRangeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "syncStackMaxTop",
    values: [
      BytesLike[],
      StorageOpcodesRangeStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "applyFn0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn5", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn7", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFn8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "applyFnN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ensureIntegrity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensureIntegrityTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popUnderflowCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncStackMaxTop",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibIntegrityStateTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibIntegrityStateTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyFn0(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn1(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn2(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn3(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn4(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn5(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn6(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn7(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFn8(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    applyFnN(
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ensureIntegrity(
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      sources_: BytesLike[],
      constantsLength_: BigNumberish,
      finalStacks_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        scratch_: BigNumber;
        contextScratch_: BigNumber;
        stackLength_: BigNumber;
      }
    >;

    ensureIntegrityTest(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      sourceIndex_: BigNumberish,
      stackTop_: BigNumberish,
      minimumFinalStackIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stackTopAfter_: BigNumber }>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stackTopAfter_: BigNumber }>;

    popUnderflowCheck(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stackTopAfter_: BigNumber }>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stackTopAfter_: BigNumber }>;

    syncStackMaxTop(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyFn0(
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn1(
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn2(
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn3(
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn4(
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn5(
    stackTop_: BigNumberish,
    length_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn6(
    stackTop_: BigNumberish,
    length_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn7(
    stackTop_: BigNumberish,
    length_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFn8(
    stackTop_: BigNumberish,
    length_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  applyFnN(
    stackTop_: BigNumberish,
    n_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ensureIntegrity(
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    sources_: BytesLike[],
    constantsLength_: BigNumberish,
    finalStacks_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      scratch_: BigNumber;
      contextScratch_: BigNumber;
      stackLength_: BigNumber;
    }
  >;

  ensureIntegrityTest(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    sourceIndex_: BigNumberish,
    stackTop_: BigNumberish,
    minimumFinalStackIndex_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackBottom_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackBottom_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    n_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  popUnderflowCheck(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackBottom_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    n_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "push(bytes[],(uint256,uint256),uint256,uint256,uint256)"(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  syncStackMaxTop(
    sources_: BytesLike[],
    storageOpcodesRange_: StorageOpcodesRangeStruct,
    constantsLength_: BigNumberish,
    stackMaxTop_: BigNumberish,
    stackTop_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyFn0(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn1(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn4(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn5(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn6(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn7(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn8(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnN(
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureIntegrity(
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      sources_: BytesLike[],
      constantsLength_: BigNumberish,
      finalStacks_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        scratch_: BigNumber;
        contextScratch_: BigNumber;
        stackLength_: BigNumber;
      }
    >;

    ensureIntegrityTest(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      sourceIndex_: BigNumberish,
      stackTop_: BigNumberish,
      minimumFinalStackIndex_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popUnderflowCheck(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncStackMaxTop(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    applyFn0(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn1(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn2(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn3(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn4(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn5(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn6(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn7(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFn8(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applyFnN(
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureIntegrity(
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      sources_: BytesLike[],
      constantsLength_: BigNumberish,
      finalStacks_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensureIntegrityTest(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      sourceIndex_: BigNumberish,
      stackTop_: BigNumberish,
      minimumFinalStackIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    popUnderflowCheck(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncStackMaxTop(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyFn0(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn1(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn2(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn3(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn4(
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn5(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn6(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn7(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFn8(
      stackTop_: BigNumberish,
      length_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyFnN(
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureIntegrity(
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      sources_: BytesLike[],
      constantsLength_: BigNumberish,
      finalStacks_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensureIntegrityTest(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      sourceIndex_: BigNumberish,
      stackTop_: BigNumberish,
      minimumFinalStackIndex_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pop(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    popUnderflowCheck(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackBottom_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      n_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "push(bytes[],(uint256,uint256),uint256,uint256,uint256)"(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncStackMaxTop(
      sources_: BytesLike[],
      storageOpcodesRange_: StorageOpcodesRangeStruct,
      constantsLength_: BigNumberish,
      stackMaxTop_: BigNumberish,
      stackTop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
