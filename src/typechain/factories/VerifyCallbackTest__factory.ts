/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  VerifyCallbackTest,
  VerifyCallbackTestInterface,
} from "../VerifyCallbackTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "additions",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "adder_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Evidence[]",
        name: "evidences_",
        type: "tuple[]",
      },
    ],
    name: "afterAdd",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Evidence[]",
        name: "evidences_",
        type: "tuple[]",
      },
    ],
    name: "afterApprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "banner_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Evidence[]",
        name: "evidences_",
        type: "tuple[]",
      },
    ],
    name: "afterBan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "remover_",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Evidence[]",
        name: "evidences_",
        type: "tuple[]",
      },
    ],
    name: "afterRemove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "approvals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bans",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "removals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506111e5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639897187b1161005b5780639897187b146100ff578063ad285cad14610122578063ebae2d8c14610145578063f24267891461015857600080fd5b8063376dcbe21461008d5780635d0341ba146100a257806389bd6b26146100d95780638f6b1146146100ec575b600080fd5b6100a061009b366004610fbf565b61017b565b005b6100c56100b0366004611045565b60016020526000908152604090205460ff1681565b604051901515815260200160405180910390f35b6100a06100e7366004610fbf565b61053b565b6100a06100fa366004610fbf565b61082a565b6100c561010d366004611045565b60036020526000908152604090205460ff1681565b6100c5610130366004611045565b60026020526000908152604090205460ff1681565b6100a0610153366004610fbf565b610be0565b6100c5610166366004611045565b60006020819052908152604090205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff83166101fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f41444452455353000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005b81811015610535576001600084848481811061021e5761021e611067565b90506020028101906102309190611096565b61023e906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff16156102cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f5052494f525f415050524f56450000000000000000000000000000000000000060448201526064016101f4565b60408051808201909152600481527f476f6f64000000000000000000000000000000000000000000000000000000006020909101527fa8dae9b555011d119186698e9c3ac10ea4db14c9780aa0d040dd47e9bfc6f41f83838381811061033757610337611067565b90506020028101906103499190611096565b6103579060208101906110d4565b604051610365929190611140565b6040518091039020146103d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4241445f45564944454e4345000000000000000000000000000000000000000060448201526064016101f4565b6000808484848181106103e9576103e9611067565b90506020028101906103fb9190611096565b610409906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff16610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f41444445445f43414c4c4241434b000000000000000000000000000060448201526064016101f4565b60018060008585858181106104b0576104b0611067565b90506020028101906104c29190611096565b6104d0906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558061052d81611150565b915050610200565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166105b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f41444452455353000000000000000000000000000000000000000000000060448201526064016101f4565b60005b81811015610535576000808484848181106105d8576105d8611067565b90506020028101906105ea9190611096565b6105f8906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff1615610689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5052494f525f414444000000000000000000000000000000000000000000000060448201526064016101f4565b60408051808201909152600481527f476f6f64000000000000000000000000000000000000000000000000000000006020909101527fa8dae9b555011d119186698e9c3ac10ea4db14c9780aa0d040dd47e9bfc6f41f8383838181106106f1576106f1611067565b90506020028101906107039190611096565b6107119060208101906110d4565b60405161071f929190611140565b60405180910390201461078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4241445f45564944454e4345000000000000000000000000000000000000000060448201526064016101f4565b60016000808585858181106107a5576107a5611067565b90506020028101906107b79190611096565b6107c5906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558061082281611150565b9150506105bb565b73ffffffffffffffffffffffffffffffffffffffff83166108a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f41444452455353000000000000000000000000000000000000000000000060448201526064016101f4565b60005b8181101561053557600260008484848181106108c8576108c8611067565b90506020028101906108da9190611096565b6108e8906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff1615610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f5052494f525f42414e000000000000000000000000000000000000000000000060448201526064016101f4565b60408051808201909152600481527f476f6f64000000000000000000000000000000000000000000000000000000006020909101527fa8dae9b555011d119186698e9c3ac10ea4db14c9780aa0d040dd47e9bfc6f41f8383838181106109e1576109e1611067565b90506020028101906109f39190611096565b610a019060208101906110d4565b604051610a0f929190611140565b604051809103902014610a7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4241445f45564944454e4345000000000000000000000000000000000000000060448201526064016101f4565b600080848484818110610a9357610a93611067565b9050602002810190610aa59190611096565b610ab3906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff16610b43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f41444445445f43414c4c4241434b000000000000000000000000000060448201526064016101f4565b600160026000858585818110610b5b57610b5b611067565b9050602002810190610b6d9190611096565b610b7b906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905580610bd881611150565b9150506108aa565b73ffffffffffffffffffffffffffffffffffffffff8316610c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f305f41444452455353000000000000000000000000000000000000000000000060448201526064016101f4565b60005b818110156105355760036000848484818110610c7e57610c7e611067565b9050602002810190610c909190611096565b610c9e906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff1615610d2f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f5052494f525f52454d4f5645000000000000000000000000000000000000000060448201526064016101f4565b60408051808201909152600481527f476f6f64000000000000000000000000000000000000000000000000000000006020909101527fa8dae9b555011d119186698e9c3ac10ea4db14c9780aa0d040dd47e9bfc6f41f838383818110610d9757610d97611067565b9050602002810190610da99190611096565b610db79060208101906110d4565b604051610dc5929190611140565b604051809103902014610e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4241445f45564944454e4345000000000000000000000000000000000000000060448201526064016101f4565b600080848484818110610e4957610e49611067565b9050602002810190610e5b9190611096565b610e69906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff16610ef9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e4f545f41444445445f43414c4c4241434b000000000000000000000000000060448201526064016101f4565b600160036000858585818110610f1157610f11611067565b9050602002810190610f239190611096565b610f31906020810190611045565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905580610f8e81611150565b915050610c60565b803573ffffffffffffffffffffffffffffffffffffffff81168114610fba57600080fd5b919050565b600080600060408486031215610fd457600080fd5b610fdd84610f96565b9250602084013567ffffffffffffffff80821115610ffa57600080fd5b818601915086601f83011261100e57600080fd5b81358181111561101d57600080fd5b8760208260051b850101111561103257600080fd5b6020830194508093505050509250925092565b60006020828403121561105757600080fd5b61106082610f96565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18336030181126110ca57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261110957600080fd5b83018035915067ffffffffffffffff82111561112457600080fd5b60200191503681900382131561113957600080fd5b9250929050565b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111a8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220bb1ea6c0e63a740923e6b656423bf6bb993d749a30b5235c6f46853e35ff634d64736f6c63430008110033";

type VerifyCallbackTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyCallbackTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifyCallbackTest__factory extends ContractFactory {
  constructor(...args: VerifyCallbackTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VerifyCallbackTest> {
    return super.deploy(overrides || {}) as Promise<VerifyCallbackTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VerifyCallbackTest {
    return super.attach(address) as VerifyCallbackTest;
  }
  connect(signer: Signer): VerifyCallbackTest__factory {
    return super.connect(signer) as VerifyCallbackTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyCallbackTestInterface {
    return new utils.Interface(_abi) as VerifyCallbackTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VerifyCallbackTest {
    return new Contract(address, _abi, signerOrProvider) as VerifyCallbackTest;
  }
}
