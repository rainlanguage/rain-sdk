/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LibUint256ArrayTestInterface extends utils.Interface {
  functions: {
    "arrayFrom(uint256,uint256,uint256,uint256)": FunctionFragment;
    "copyToNewUint256Array(uint256[])": FunctionFragment;
    "extend(uint256[],uint256[])": FunctionFragment;
    "truncate(uint256[],uint256)": FunctionFragment;
    "unsafeCopyValuesTo(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "arrayFrom",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "copyToNewUint256Array",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "extend",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "truncate",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeCopyValuesTo",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "arrayFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyToNewUint256Array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "truncate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsafeCopyValuesTo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibUint256ArrayTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibUint256ArrayTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "arrayFrom(uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256)"(
      a_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256,uint256,uint256[])"(
      a_: BigNumberish,
      b_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256,uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "arrayFrom(uint256,uint256[])"(
      a_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    copyToNewUint256Array(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    extend(
      base_: BigNumberish[],
      extend_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { baseCopy_: BigNumber[] }>;

    truncate(
      array_: BigNumberish[],
      newLength_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    unsafeCopyValuesTo(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  "arrayFrom(uint256,uint256,uint256,uint256)"(
    a_: BigNumberish,
    b_: BigNumberish,
    c_: BigNumberish,
    d_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256,uint256)"(
    a_: BigNumberish,
    b_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256)"(
    a_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256,uint256,uint256[])"(
    a_: BigNumberish,
    b_: BigNumberish,
    tail_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256,uint256,uint256)"(
    a_: BigNumberish,
    b_: BigNumberish,
    c_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256,uint256,uint256,uint256,uint256)"(
    a_: BigNumberish,
    b_: BigNumberish,
    c_: BigNumberish,
    d_: BigNumberish,
    e_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "arrayFrom(uint256,uint256[])"(
    a_: BigNumberish,
    tail_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  copyToNewUint256Array(
    inputs_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  extend(
    base_: BigNumberish[],
    extend_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  truncate(
    array_: BigNumberish[],
    newLength_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  unsafeCopyValuesTo(
    inputs_: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    "arrayFrom(uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256)"(
      a_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256,uint256,uint256[])"(
      a_: BigNumberish,
      b_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256,uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "arrayFrom(uint256,uint256[])"(
      a_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    copyToNewUint256Array(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    extend(
      base_: BigNumberish[],
      extend_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    truncate(
      array_: BigNumberish[],
      newLength_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    unsafeCopyValuesTo(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    "arrayFrom(uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256)"(
      a_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256,uint256,uint256[])"(
      a_: BigNumberish,
      b_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256,uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "arrayFrom(uint256,uint256[])"(
      a_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    copyToNewUint256Array(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extend(
      base_: BigNumberish[],
      extend_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    truncate(
      array_: BigNumberish[],
      newLength_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsafeCopyValuesTo(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "arrayFrom(uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256)"(
      a_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256,uint256,uint256[])"(
      a_: BigNumberish,
      b_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256,uint256,uint256,uint256,uint256)"(
      a_: BigNumberish,
      b_: BigNumberish,
      c_: BigNumberish,
      d_: BigNumberish,
      e_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "arrayFrom(uint256,uint256[])"(
      a_: BigNumberish,
      tail_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    copyToNewUint256Array(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extend(
      base_: BigNumberish[],
      extend_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    truncate(
      array_: BigNumberish[],
      newLength_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsafeCopyValuesTo(
      inputs_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
