/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1271Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271Upgradeable__factory>;
    getContractFactory(
      name: "IERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4626Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Upgradeable__factory>;
    getContractFactory(
      name: "ERC1155BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155MetadataURIUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC1155Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Upgradeable__factory>;
    getContractFactory(
      name: "ERC1155HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155HolderUpgradeable__factory>;
    getContractFactory(
      name: "ERC1155ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20SnapshotUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20SnapshotUpgradeable__factory>;
    getContractFactory(
      name: "ERC4626Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC4626Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BurnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721HolderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721HolderUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "MulticallUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallUpgradeable__factory>;
    getContractFactory(
      name: "Cooldown",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Cooldown__factory>;
    getContractFactory(
      name: "SeedDance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedDance__factory>;
    getContractFactory(
      name: "ERC20Redeem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Redeem__factory>;
    getContractFactory(
      name: "RedeemableERC20ClaimEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20ClaimEscrow__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "FactoryCurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryCurator__factory>;
    getContractFactory(
      name: "IFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFactory__factory>;
    getContractFactory(
      name: "Flow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Flow__factory>;
    getContractFactory(
      name: "FlowFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowFactory__factory>;
    getContractFactory(
      name: "FlowERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC1155__factory>;
    getContractFactory(
      name: "FlowERC1155Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC1155Factory__factory>;
    getContractFactory(
      name: "FlowERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC20__factory>;
    getContractFactory(
      name: "FlowERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC20Factory__factory>;
    getContractFactory(
      name: "FlowERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC721__factory>;
    getContractFactory(
      name: "FlowERC721Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowERC721Factory__factory>;
    getContractFactory(
      name: "FlowCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlowCommon__factory>;
    getContractFactory(
      name: "IExpressionDeployerV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExpressionDeployerV1__factory>;
    getContractFactory(
      name: "IRainInterpreterIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRainInterpreterIntegrity__factory>;
    getContractFactory(
      name: "RainInterpreterIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RainInterpreterIntegrity__factory>;
    getContractFactory(
      name: "StandardIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardIntegrity__factory>;
    getContractFactory(
      name: "IInterpreterV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterpreterV1__factory>;
    getContractFactory(
      name: "RainInterpreter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RainInterpreter__factory>;
    getContractFactory(
      name: "StandardInterpreter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardInterpreter__factory>;
    getContractFactory(
      name: "Rainterpreter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Rainterpreter__factory>;
    getContractFactory(
      name: "RainterpreterExpressionDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RainterpreterExpressionDeployer__factory>;
    getContractFactory(
      name: "NoticeBoard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoticeBoard__factory>;
    getContractFactory(
      name: "OrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBook__factory>;
    getContractFactory(
      name: "OrderBookIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBookIntegrity__factory>;
    getContractFactory(
      name: "Phased",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Phased__factory>;
    getContractFactory(
      name: "RedeemableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20__factory>;
    getContractFactory(
      name: "RedeemableERC20Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Factory__factory>;
    getContractFactory(
      name: "ISaleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISaleV2__factory>;
    getContractFactory(
      name: "Sale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sale__factory>;
    getContractFactory(
      name: "SaleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleFactory__factory>;
    getContractFactory(
      name: "SSTORE2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSTORE2__factory>;
    getContractFactory(
      name: "Bytecode",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bytecode__factory>;
    getContractFactory(
      name: "Stake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Stake__factory>;
    getContractFactory(
      name: "StakeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeFactory__factory>;
    getContractFactory(
      name: "LibUint256ArrayTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibUint256ArrayTest__factory>;
    getContractFactory(
      name: "LibBytesTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibBytesTest__factory>;
    getContractFactory(
      name: "CooldownTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CooldownTest__factory>;
    getContractFactory(
      name: "LibCommitmentTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibCommitmentTest__factory>;
    getContractFactory(
      name: "LibSeedTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibSeedTest__factory>;
    getContractFactory(
      name: "SeedDanceTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SeedDanceTest__factory>;
    getContractFactory(
      name: "RedeemableERC20ClaimEscrowWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20ClaimEscrowWrapper__factory>;
    getContractFactory(
      name: "SaleEscrowWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleEscrowWrapper__factory>;
    getContractFactory(
      name: "FactoryChildTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryChildTest__factory>;
    getContractFactory(
      name: "FactoryTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryTest__factory>;
    getContractFactory(
      name: "LibIdempotentFlagTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibIdempotentFlagTest__factory>;
    getContractFactory(
      name: "LibIntegrityStateTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibIntegrityStateTest__factory>;
    getContractFactory(
      name: "AllStandardOpsTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllStandardOpsTest__factory>;
    getContractFactory(
      name: "LibInterpreterStateTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibInterpreterStateTest__factory>;
    getContractFactory(
      name: "LibStackTopTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibStackTopTest__factory>;
    getContractFactory(
      name: "StackHeightTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StackHeightTest__factory>;
    getContractFactory(
      name: "FixedPointMathTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FixedPointMathTest__factory>;
    getContractFactory(
      name: "RandomTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomTest__factory>;
    getContractFactory(
      name: "SaturatingMathTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaturatingMathTest__factory>;
    getContractFactory(
      name: "LibMemorySizeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibMemorySizeTest__factory>;
    getContractFactory(
      name: "PhasedScheduleTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedScheduleTest__factory>;
    getContractFactory(
      name: "PhasedTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PhasedTest__factory>;
    getContractFactory(
      name: "ERC20PulleeTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PulleeTest__factory>;
    getContractFactory(
      name: "RedeemableERC20Reentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedeemableERC20Reentrant__factory>;
    getContractFactory(
      name: "MockISaleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockISaleV2__factory>;
    getContractFactory(
      name: "SaleReentrant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SaleReentrant__factory>;
    getContractFactory(
      name: "ReserveToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveToken__factory>;
    getContractFactory(
      name: "ReserveToken18",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveToken18__factory>;
    getContractFactory(
      name: "ReserveTokenERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenERC1155__factory>;
    getContractFactory(
      name: "ReserveTokenERC20Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenERC20Snapshot__factory>;
    getContractFactory(
      name: "ReserveTokenERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenERC721__factory>;
    getContractFactory(
      name: "ReserveTokenTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveTokenTest__factory>;
    getContractFactory(
      name: "ReportOMeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReportOMeter__factory>;
    getContractFactory(
      name: "TierReportTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierReportTest__factory>;
    getContractFactory(
      name: "ReadWriteTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReadWriteTier__factory>;
    getContractFactory(
      name: "TierV2Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierV2Test__factory>;
    getContractFactory(
      name: "LibCastTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibCastTest__factory>;
    getContractFactory(
      name: "LibConvertTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibConvertTest__factory>;
    getContractFactory(
      name: "LibEvidenceTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibEvidenceTest__factory>;
    getContractFactory(
      name: "VerifyCallbackTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyCallbackTest__factory>;
    getContractFactory(
      name: "CombineTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CombineTier__factory>;
    getContractFactory(
      name: "CombineTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CombineTierFactory__factory>;
    getContractFactory(
      name: "ITierV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITierV2__factory>;
    getContractFactory(
      name: "TierV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TierV2__factory>;
    getContractFactory(
      name: "VerifyTier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTier__factory>;
    getContractFactory(
      name: "VerifyTierFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyTierFactory__factory>;
    getContractFactory(
      name: "AutoApprove",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoApprove__factory>;
    getContractFactory(
      name: "AutoApproveFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoApproveFactory__factory>;
    getContractFactory(
      name: "AutoApproveIntegrity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoApproveIntegrity__factory>;
    getContractFactory(
      name: "IVerifyCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifyCallback__factory>;
    getContractFactory(
      name: "Verify",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verify__factory>;
    getContractFactory(
      name: "VerifyCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyCallback__factory>;
    getContractFactory(
      name: "VerifyFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VerifyFactory__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1271Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271Upgradeable>;
    getContractAt(
      name: "IERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4626Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Upgradeable>;
    getContractAt(
      name: "ERC1155BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155BurnableUpgradeable>;
    getContractAt(
      name: "IERC1155MetadataURIUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURIUpgradeable>;
    getContractAt(
      name: "IERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "IERC1155Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Upgradeable>;
    getContractAt(
      name: "ERC1155HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155HolderUpgradeable>;
    getContractAt(
      name: "ERC1155ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155ReceiverUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20SnapshotUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20SnapshotUpgradeable>;
    getContractAt(
      name: "ERC4626Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC4626Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BurnableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC721HolderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721HolderUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "MulticallUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallUpgradeable>;
    getContractAt(
      name: "Cooldown",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Cooldown>;
    getContractAt(
      name: "SeedDance",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedDance>;
    getContractAt(
      name: "ERC20Redeem",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Redeem>;
    getContractAt(
      name: "RedeemableERC20ClaimEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20ClaimEscrow>;
    getContractAt(
      name: "Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "FactoryCurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryCurator>;
    getContractAt(
      name: "IFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFactory>;
    getContractAt(
      name: "Flow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Flow>;
    getContractAt(
      name: "FlowFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowFactory>;
    getContractAt(
      name: "FlowERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC1155>;
    getContractAt(
      name: "FlowERC1155Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC1155Factory>;
    getContractAt(
      name: "FlowERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC20>;
    getContractAt(
      name: "FlowERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC20Factory>;
    getContractAt(
      name: "FlowERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC721>;
    getContractAt(
      name: "FlowERC721Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowERC721Factory>;
    getContractAt(
      name: "FlowCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlowCommon>;
    getContractAt(
      name: "IExpressionDeployerV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExpressionDeployerV1>;
    getContractAt(
      name: "IRainInterpreterIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRainInterpreterIntegrity>;
    getContractAt(
      name: "RainInterpreterIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RainInterpreterIntegrity>;
    getContractAt(
      name: "StandardIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardIntegrity>;
    getContractAt(
      name: "IInterpreterV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterpreterV1>;
    getContractAt(
      name: "RainInterpreter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RainInterpreter>;
    getContractAt(
      name: "StandardInterpreter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardInterpreter>;
    getContractAt(
      name: "Rainterpreter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Rainterpreter>;
    getContractAt(
      name: "RainterpreterExpressionDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RainterpreterExpressionDeployer>;
    getContractAt(
      name: "NoticeBoard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoticeBoard>;
    getContractAt(
      name: "OrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBook>;
    getContractAt(
      name: "OrderBookIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBookIntegrity>;
    getContractAt(
      name: "Phased",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Phased>;
    getContractAt(
      name: "RedeemableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20>;
    getContractAt(
      name: "RedeemableERC20Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Factory>;
    getContractAt(
      name: "ISaleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISaleV2>;
    getContractAt(
      name: "Sale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Sale>;
    getContractAt(
      name: "SaleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleFactory>;
    getContractAt(
      name: "SSTORE2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SSTORE2>;
    getContractAt(
      name: "Bytecode",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bytecode>;
    getContractAt(
      name: "Stake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Stake>;
    getContractAt(
      name: "StakeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeFactory>;
    getContractAt(
      name: "LibUint256ArrayTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibUint256ArrayTest>;
    getContractAt(
      name: "LibBytesTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibBytesTest>;
    getContractAt(
      name: "CooldownTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CooldownTest>;
    getContractAt(
      name: "LibCommitmentTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibCommitmentTest>;
    getContractAt(
      name: "LibSeedTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibSeedTest>;
    getContractAt(
      name: "SeedDanceTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SeedDanceTest>;
    getContractAt(
      name: "RedeemableERC20ClaimEscrowWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20ClaimEscrowWrapper>;
    getContractAt(
      name: "SaleEscrowWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleEscrowWrapper>;
    getContractAt(
      name: "FactoryChildTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryChildTest>;
    getContractAt(
      name: "FactoryTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryTest>;
    getContractAt(
      name: "LibIdempotentFlagTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibIdempotentFlagTest>;
    getContractAt(
      name: "LibIntegrityStateTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibIntegrityStateTest>;
    getContractAt(
      name: "AllStandardOpsTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllStandardOpsTest>;
    getContractAt(
      name: "LibInterpreterStateTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibInterpreterStateTest>;
    getContractAt(
      name: "LibStackTopTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibStackTopTest>;
    getContractAt(
      name: "StackHeightTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StackHeightTest>;
    getContractAt(
      name: "FixedPointMathTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FixedPointMathTest>;
    getContractAt(
      name: "RandomTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomTest>;
    getContractAt(
      name: "SaturatingMathTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaturatingMathTest>;
    getContractAt(
      name: "LibMemorySizeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibMemorySizeTest>;
    getContractAt(
      name: "PhasedScheduleTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedScheduleTest>;
    getContractAt(
      name: "PhasedTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PhasedTest>;
    getContractAt(
      name: "ERC20PulleeTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PulleeTest>;
    getContractAt(
      name: "RedeemableERC20Reentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedeemableERC20Reentrant>;
    getContractAt(
      name: "MockISaleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockISaleV2>;
    getContractAt(
      name: "SaleReentrant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SaleReentrant>;
    getContractAt(
      name: "ReserveToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveToken>;
    getContractAt(
      name: "ReserveToken18",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveToken18>;
    getContractAt(
      name: "ReserveTokenERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenERC1155>;
    getContractAt(
      name: "ReserveTokenERC20Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenERC20Snapshot>;
    getContractAt(
      name: "ReserveTokenERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenERC721>;
    getContractAt(
      name: "ReserveTokenTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveTokenTest>;
    getContractAt(
      name: "ReportOMeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReportOMeter>;
    getContractAt(
      name: "TierReportTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierReportTest>;
    getContractAt(
      name: "ReadWriteTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReadWriteTier>;
    getContractAt(
      name: "TierV2Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierV2Test>;
    getContractAt(
      name: "LibCastTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibCastTest>;
    getContractAt(
      name: "LibConvertTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibConvertTest>;
    getContractAt(
      name: "LibEvidenceTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibEvidenceTest>;
    getContractAt(
      name: "VerifyCallbackTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyCallbackTest>;
    getContractAt(
      name: "CombineTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CombineTier>;
    getContractAt(
      name: "CombineTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CombineTierFactory>;
    getContractAt(
      name: "ITierV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITierV2>;
    getContractAt(
      name: "TierV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TierV2>;
    getContractAt(
      name: "VerifyTier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyTier>;
    getContractAt(
      name: "VerifyTierFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyTierFactory>;
    getContractAt(
      name: "AutoApprove",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoApprove>;
    getContractAt(
      name: "AutoApproveFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoApproveFactory>;
    getContractAt(
      name: "AutoApproveIntegrity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoApproveIntegrity>;
    getContractAt(
      name: "IVerifyCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifyCallback>;
    getContractAt(
      name: "Verify",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Verify>;
    getContractAt(
      name: "VerifyCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyCallback>;
    getContractAt(
      name: "VerifyFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VerifyFactory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
