/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ClearStateChangeStruct = {
  aOutput: BigNumberish;
  bOutput: BigNumberish;
  aInput: BigNumberish;
  bInput: BigNumberish;
  aFlag: BigNumberish;
  bFlag: BigNumberish;
};

export type ClearStateChangeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  aOutput: BigNumber;
  bOutput: BigNumber;
  aInput: BigNumber;
  bInput: BigNumber;
  aFlag: BigNumber;
  bFlag: BigNumber;
};

export type IOStruct = { token: string; vaultId: BigNumberish };

export type IOStructOutput = [string, BigNumber] & {
  token: string;
  vaultId: BigNumber;
};

export type OrderStruct = {
  owner: string;
  validInputs: IOStruct[];
  validOutputs: IOStruct[];
  interpreterState: BytesLike;
};

export type OrderStructOutput = [
  string,
  IOStructOutput[],
  IOStructOutput[],
  string
] & {
  owner: string;
  validInputs: IOStructOutput[];
  validOutputs: IOStructOutput[];
  interpreterState: string;
};

export type ClearConfigStruct = {
  aInputIOIndex: BigNumberish;
  aOutputIOIndex: BigNumberish;
  bInputIOIndex: BigNumberish;
  bOutputIOIndex: BigNumberish;
  aBountyVaultId: BigNumberish;
  bBountyVaultId: BigNumberish;
};

export type ClearConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  aInputIOIndex: BigNumber;
  aOutputIOIndex: BigNumber;
  bInputIOIndex: BigNumber;
  bOutputIOIndex: BigNumber;
  aBountyVaultId: BigNumber;
  bBountyVaultId: BigNumber;
};

export type DepositConfigStruct = {
  token: string;
  vaultId: BigNumberish;
  amount: BigNumberish;
};

export type DepositConfigStructOutput = [string, BigNumber, BigNumber] & {
  token: string;
  vaultId: BigNumber;
  amount: BigNumber;
};

export type StateConfigStruct = {
  sources: BytesLike[];
  constants: BigNumberish[];
};

export type StateConfigStructOutput = [string[], BigNumber[]] & {
  sources: string[];
  constants: BigNumber[];
};

export type TakeOrderConfigStruct = {
  order: OrderStruct;
  inputIOIndex: BigNumberish;
  outputIOIndex: BigNumberish;
};

export type TakeOrderConfigStructOutput = [
  OrderStructOutput,
  BigNumber,
  BigNumber
] & {
  order: OrderStructOutput;
  inputIOIndex: BigNumber;
  outputIOIndex: BigNumber;
};

export type WithdrawConfigStruct = {
  token: string;
  vaultId: BigNumberish;
  amount: BigNumberish;
};

export type WithdrawConfigStructOutput = [string, BigNumber, BigNumber] & {
  token: string;
  vaultId: BigNumber;
  amount: BigNumber;
};

export type OrderConfigStruct = {
  validInputs: IOStruct[];
  validOutputs: IOStruct[];
  interpreterStateConfig: StateConfigStruct;
};

export type OrderConfigStructOutput = [
  IOStructOutput[],
  IOStructOutput[],
  StateConfigStructOutput
] & {
  validInputs: IOStructOutput[];
  validOutputs: IOStructOutput[];
  interpreterStateConfig: StateConfigStructOutput;
};

export type StorageOpcodesRangeStruct = {
  pointer: BigNumberish;
  length: BigNumberish;
};

export type StorageOpcodesRangeStructOutput = [BigNumber, BigNumber] & {
  pointer: BigNumber;
  length: BigNumber;
};

export type TakeOrdersConfigStruct = {
  output: string;
  input: string;
  minimumInput: BigNumberish;
  maximumInput: BigNumberish;
  maximumIORatio: BigNumberish;
  orders: TakeOrderConfigStruct[];
};

export type TakeOrdersConfigStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  TakeOrderConfigStructOutput[]
] & {
  output: string;
  input: string;
  minimumInput: BigNumber;
  maximumInput: BigNumber;
  maximumIORatio: BigNumber;
  orders: TakeOrderConfigStructOutput[];
};

export interface OrderBookInterface extends utils.Interface {
  functions: {
    "addOrder(((address,uint256)[],(address,uint256)[],(bytes[],uint256[])))": FunctionFragment;
    "clear((address,(address,uint256)[],(address,uint256)[],bytes),(address,(address,uint256)[],(address,uint256)[],bytes),(uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "deposit((address,uint256,uint256))": FunctionFragment;
    "removeOrder((address,(address,uint256)[],(address,uint256)[],bytes))": FunctionFragment;
    "storageOpcodesRange()": FunctionFragment;
    "takeOrders((address,address,uint256,uint256,uint256,((address,(address,uint256)[],(address,uint256)[],bytes),uint256,uint256)[]))": FunctionFragment;
    "withdraw((address,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [OrderConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [OrderStruct, OrderStruct, ClearConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [DepositConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "storageOpcodesRange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeOrders",
    values: [TakeOrdersConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawConfigStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storageOpcodesRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AfterClear(tuple)": EventFragment;
    "Clear(address,tuple,tuple,tuple)": EventFragment;
    "Deposit(address,tuple)": EventFragment;
    "OrderDead(address,tuple)": EventFragment;
    "OrderLive(address,tuple)": EventFragment;
    "SaveInterpreterState(address,uint256,tuple)": EventFragment;
    "TakeOrder(address,tuple,uint256,uint256)": EventFragment;
    "Withdraw(address,tuple,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AfterClear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderDead"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderLive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaveInterpreterState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AfterClearEvent = TypedEvent<
  [ClearStateChangeStructOutput],
  { stateChange: ClearStateChangeStructOutput }
>;

export type AfterClearEventFilter = TypedEventFilter<AfterClearEvent>;

export type ClearEvent = TypedEvent<
  [string, OrderStructOutput, OrderStructOutput, ClearConfigStructOutput],
  {
    sender: string;
    a_: OrderStructOutput;
    b_: OrderStructOutput;
    clearConfig: ClearConfigStructOutput;
  }
>;

export type ClearEventFilter = TypedEventFilter<ClearEvent>;

export type DepositEvent = TypedEvent<
  [string, DepositConfigStructOutput],
  { sender: string; config: DepositConfigStructOutput }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OrderDeadEvent = TypedEvent<
  [string, OrderStructOutput],
  { sender: string; config: OrderStructOutput }
>;

export type OrderDeadEventFilter = TypedEventFilter<OrderDeadEvent>;

export type OrderLiveEvent = TypedEvent<
  [string, OrderStructOutput],
  { sender: string; config: OrderStructOutput }
>;

export type OrderLiveEventFilter = TypedEventFilter<OrderLiveEvent>;

export type SaveInterpreterStateEvent = TypedEvent<
  [string, BigNumber, StateConfigStructOutput],
  { sender: string; id: BigNumber; config: StateConfigStructOutput }
>;

export type SaveInterpreterStateEventFilter =
  TypedEventFilter<SaveInterpreterStateEvent>;

export type TakeOrderEvent = TypedEvent<
  [string, TakeOrderConfigStructOutput, BigNumber, BigNumber],
  {
    sender: string;
    takeOrder: TakeOrderConfigStructOutput;
    input: BigNumber;
    output: BigNumber;
  }
>;

export type TakeOrderEventFilter = TypedEventFilter<TakeOrderEvent>;

export type WithdrawEvent = TypedEvent<
  [string, WithdrawConfigStructOutput, BigNumber],
  { sender: string; config: WithdrawConfigStructOutput; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface OrderBook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderBookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOrder(
      orderConfig_: OrderConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clear(
      a_: OrderStruct,
      b_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storageOpcodesRange(
      overrides?: CallOverrides
    ): Promise<[StorageOpcodesRangeStructOutput]>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    orderConfig_: OrderConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clear(
    a_: OrderStruct,
    b_: OrderStruct,
    clearConfig_: ClearConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    config_: DepositConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOrder(
    order_: OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storageOpcodesRange(
    overrides?: CallOverrides
  ): Promise<StorageOpcodesRangeStructOutput>;

  takeOrders(
    takeOrders_: TakeOrdersConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    config_: WithdrawConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      orderConfig_: OrderConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    clear(
      a_: OrderStruct,
      b_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOrder(order_: OrderStruct, overrides?: CallOverrides): Promise<void>;

    storageOpcodesRange(
      overrides?: CallOverrides
    ): Promise<StorageOpcodesRangeStructOutput>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalInput_: BigNumber;
        totalOutput_: BigNumber;
      }
    >;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AfterClear(tuple)"(stateChange?: null): AfterClearEventFilter;
    AfterClear(stateChange?: null): AfterClearEventFilter;

    "Clear(address,tuple,tuple,tuple)"(
      sender?: null,
      a_?: null,
      b_?: null,
      clearConfig?: null
    ): ClearEventFilter;
    Clear(
      sender?: null,
      a_?: null,
      b_?: null,
      clearConfig?: null
    ): ClearEventFilter;

    "Deposit(address,tuple)"(sender?: null, config?: null): DepositEventFilter;
    Deposit(sender?: null, config?: null): DepositEventFilter;

    "OrderDead(address,tuple)"(
      sender?: null,
      config?: null
    ): OrderDeadEventFilter;
    OrderDead(sender?: null, config?: null): OrderDeadEventFilter;

    "OrderLive(address,tuple)"(
      sender?: null,
      config?: null
    ): OrderLiveEventFilter;
    OrderLive(sender?: null, config?: null): OrderLiveEventFilter;

    "SaveInterpreterState(address,uint256,tuple)"(
      sender?: null,
      id?: null,
      config?: null
    ): SaveInterpreterStateEventFilter;
    SaveInterpreterState(
      sender?: null,
      id?: null,
      config?: null
    ): SaveInterpreterStateEventFilter;

    "TakeOrder(address,tuple,uint256,uint256)"(
      sender?: null,
      takeOrder?: null,
      input?: null,
      output?: null
    ): TakeOrderEventFilter;
    TakeOrder(
      sender?: null,
      takeOrder?: null,
      input?: null,
      output?: null
    ): TakeOrderEventFilter;

    "Withdraw(address,tuple,uint256)"(
      sender?: null,
      config?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(sender?: null, config?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    addOrder(
      orderConfig_: OrderConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clear(
      a_: OrderStruct,
      b_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storageOpcodesRange(overrides?: CallOverrides): Promise<BigNumber>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      orderConfig_: OrderConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clear(
      a_: OrderStruct,
      b_: OrderStruct,
      clearConfig_: ClearConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      config_: DepositConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOrder(
      order_: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storageOpcodesRange(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeOrders(
      takeOrders_: TakeOrdersConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      config_: WithdrawConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
